---
title: Entraînement
description: "Un test interactif et des exercices pour savoir si le sixième chapitre du cours a été compris."
---

<p>
  Voici quelques exercices d’entraînement sur le polymorphisme.
  Ils sont beaucoup plus abstraits que ceux d’avant, mais on n’a malheureusement pas trop le choix :
  quand on commence à manipuler des types génériques, il faut réfléchir !
</p>

<section class="quizz">
  <p>On va définir un type <code>optionnel</code>, qui indique qu’une valeur peut-être présente ou non.</p>

  <% code('ocaml') do %>
type 'a optionnel =
  | None (* On a rien *)
  | Some of 'a (* On a une valeur *)
  <% end %>

  <p>Quel est le type de ces fonctions ?</p>

  <% code('ocaml') do %>
let qqch_ou_alors opt par_defaut =
  match opt with
  | Some(x) -> x
  | None -> par_defaut
  <% end %>
  <input class="code" type="text" pattern=" *'a +optionnel *-> *'a *-> *'a *" required>

  <% code('ocaml') do %>
let contient opt x =
  match opt with
  | None -> false
  | Some(y) -> x = y
  <% end %>
  <input class="code" type="text" pattern=" *'a +optionnel *-> *'a *-> *bool *" required>

  <% code('ocaml') do %>
let multiplie opt x =
  match opt with
  | None -> None
  | Some(a) -> Some(a *. x)
  <% end %>
  <input class="code" type="text" pattern=" *float +optionnel *-> *float *-> *float +optionnel *" required>
</section>

<section class="quizz">
  <p>
    On va maintenant créer un type <code>dico</code> qui prend deux paramètres de types : un pour des clés, un pour des valeurs.
    Ce type sert à associer une valeur à une clé, pour ensuite pouvoir retrouver les valeurs en fonction de leurs clés.
    Ce type ressemble donc au type dictionnaire en Python, la seule différence est que toutes les clés ont le même type, et toutes
    les valeurs aussi, on ne peut pas mélanger.
  </p>

  <p>
    On va donc :
  </p>
  <ul>
    <li>Définir le type <code>dico</code> (indice : il est polymorphe et récursif) ;</li>
    <li>Écrire la fonction <code>creer</code> qui crée un <code>dico</code> vide ;</li>
    <li>Écrire la fonction <code>definir</code> qui prend une clé et une valeur, et l’ajoute à la fin d’un <code>dico</code> ;</li>
    <li>Écrire la fonction <code>obtenir</code> qui prend une clé et retrouve la valeur associée dans un <code>dico</code> ;</li>
    <li>Et en bonus si vous avez envie : écrire une fonction <code>supprimer</code> qui prend une clé et l’enlève d’un dictionnaire.</li>
  </ul>

  <details>
    <summary>Proposition de correction</summary>
    <% code('ocaml') do %>
type ('c, 'v) dico =
  | Vide
  | Element of 'c * 'v * ('c, 'v) dico

let creer = Vide

let rec definir (cle : 'c) (valeur : 'v) (dic : ('c, 'v) dico) : ('c, 'v) dico =
  match dic with
  | Element(_, _, suite) -> definir cle valeur suite
  | Vide -> Element(cle, valeur, Vide)

let rec obtenir (cle : 'c) (dic : ('c, 'v) dico) : 'v =
  match dic with
  | Vide -> failwith "Clé non trouvée"
  | Element(c, v, suite) ->
    if cle = c then
      v
    else
      obtenir cle suite

let rec supprimer (cle : 'c) (dic : ('c, 'v) dico) : ('c, 'v) dico =
  match dic with
  | Vide -> Vide
  | Element(c, v, suite) ->
    if c = cle then
      suite
    else
      Element(c, v, supprimer cle suite)
    <% end %>
</section>

---
title: Cours alternatif d’OCaml
no_title: true
illus: caml.jpg
---

<p>
  Ce cours a pour vocation d’être une alternative à l’UE d’INF201 de l’Université de Grenoble-Alpes.
  En effet, cette UE est pour beaucoup assez ennuyante et a tendance à dégoûter les étudiant·e·s du langage, alors qu’il peut s’avérer très intéressant.
  Nous ne savons pas si nous arriverons à faire mieux, mais ça ne coûte rien d’essayer.
  Ce cours ne couvrira donc que les bases du langage OCaml, et s’adresse principalement aux personnes ayant des bases en Python.
  Il se base sur ce qui a été vu en INF201 en 2020, et ne sera donc peut-être pas totalement à jour si les programmes changent les années suivantes.
</p>

<p>
  Nous utiliserons les conventions suivantes :
  <ul>
    <li>
      Les sections « Bonus » abordent des notions qui ne sont pas dans le cours d’INF201,
      mais intéressantes, et que vous pouvez lire si vous voulez aller plus loin.
    </li>
    <li>Les notions importantes à comprendre sont toujours en gras.</li>
  </ul>
</p>

<p>
  <strong>Note importante :</strong> il est conseillé de tester les exemples de code au fur et à mesure,
  et de bien les comprendre avant de passer à la suite. Créer vos propres exemples aide aussi beaucoup à assimiler
  les nouvelles notions.
</p>

<ol class="toc">
  <li>
    Notions de base
    <ol>
      <li><a href="/I/1-presentation">Présentation d’OCaml</a></li>
      <li><a href="/I/2-premiers-pas">Premiers pas en OCaml</a></li>
      <li><a href="/I/3-plus-de-types">Plus de types !</a></li>
      <li><a href="/I/4-les-fonctions">Les fonctions</a></li>
      <li><a href="/I/5-quiz">Quiz de fin de chapitre</a></li>
    </ol>
  </li>
  <li>
    Conditions et pattern-matching
    <ol>
      <li><a href="/II/1-conditions">Les conditions</a></li>
      <li><a href="/II/2-pattern-matching">Le pattern-matching</a></li>
      <li><a href="/II/3-quiz">Quiz de fin de chapitre</a></li>
    </ol>
  </li>
  <li>
    Modéliser des données
    <ol>
      <li><a href="/III/1-theorie">Un peu de théorie</a></li>
      <li><a href="/III/2-types-synonymes">Les types synonymes</a></li>
      <li><a href="/III/3-types-produits">Les types produits</a></li>
      <li><a href="/III/4-types-sommes">Les types sommes</a></li>
      <li><a href="/III/5-types-structures">Bonus : les types structurés</a></li>
      <li><a href="/III/6-quiz">Quiz de fin de chapitre</a></li>
    </ol>
  </li>
  <li>
    Récursivité
    <ol>
      <li><a href="/IV/1-fonctions-recursives">Fonctions récursives</a></li>
      <li><a href="/IV/2-types-recursifs">Types récursifs</a></li>
      <li><a href="/IV/3-quiz">Quiz de fin de chapitre</a></li>
    </ol>
  </li>
  <li>
    Coder, et bien coder
    <ol>
      <li><a href="/V/1-ecrire-une-specification">Écrire une spécification</a></li>
      <li><a href="/V/2-realiser-une-mesure">Réaliser une mesure</a></li>
      <li><a href="/V/3-autres-bonnes-pratiques">Autres bonnes pratiques</a></li>
    </ol>
  </li>
  <li>
    Le type list d’OCaml
    <ol>
      <li><a href="/VI/1-le-type-list">Le type list</a></li>
      <li><a href="/VI/2-quiz">Quiz de fin de chapitre</a></li>
    </ol>
  </li>
  <li>
      Les arbres
  </li>
  <li>
      Ordre supérieur
  </li>
  <li>
    Annexes :
    <ol style="list-style-type: upper-alpha">
      <li><a href="/A">Installer OCaml</a></li>
    </ol>
  </li>
</ol>
</h3>

<p>Les deux derniers chapitres seront ajoutés une fois qu’ils auront été vus en cours.</p>

<p>Si vous avez des remarques ou des suggestions, vous pouvez nous en faire part en écrivant un mail à <code>ana arobase gelez point xyz</code>.</p>
